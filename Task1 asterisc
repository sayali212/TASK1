#include <iostream>
#include <vector>

using namespace std;

// Class representing a customer
class Customer {
private:
    int id;
    string name;

public:
    Customer(int customerId, const string& customerName) : id(customerId), name(customerName) {}

    int getID() const {
        return id;
    }

    string getName() const {
        return name;
    }
};

// Class representing an account
class Account {
private:
    int id;
    int customerId;
    double balance;

public:
    Account(int accountId, int accCustomerId, double initialBalance) : id(accountId), customerId(accCustomerId), balance(initialBalance) {}

    int getID() const {
        return id;
    }

    int getCustomerID() const {
        return customerId;
    }

    double getBalance() const {
        return balance;
    }

    void deposit(double amount) {
        balance += amount;
    }

    bool withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            return true;
        }
        return false;
    }
};

// Class representing the bank management system
class BankManagementSystem {
private:
    vector<Customer> customers;
    vector<Account> accounts;

public:
    void addCustomer(int customerId, const string& customerName) {
        Customer newCustomer(customerId, customerName);
        customers.push_back(newCustomer);
        cout << "CUSTOMER CREATED SUCCESSFULLY!" << endl;
    }

    void createAccount(int accountId, int customerId, double initialBalance) {
        Account newAccount(accountId, customerId, initialBalance);
        accounts.push_back(newAccount);
        cout << "ACCOUNT CREATED SUCCESSFULLY!" << endl;
    }

    void displayAccounts() const {
        cout << "--- Account Details ---" << endl;
        for (const auto& account : accounts) {
            cout << "Account ID: " << account.getID() << endl;
            cout << "Customer ID: " << account.getCustomerID() << endl;
            cout << "Balance: " << account.getBalance() << endl;
            cout << "-----------------------" << endl;
        }
    }

    void deposit(int accountId, double amount) {
        for (auto& account : accounts) {
            if (account.getID() == accountId) {
                account.deposit(amount);
                cout << "SUCCESSFULLY DEPOSITED! AVAILABLE BALANCE IS: " << account.getBalance() << endl;
                return;
            }
        }
        cout << "INVALID ACCOUNT ID!" << endl;
    }

    void withdraw(int accountId, double amount) {
        for (auto& account : accounts) {
            if (account.getID() == accountId) {
                if (account.withdraw(amount)) {
                    cout << "WITHDRAWAL SUCCESSFULLY! NEW BALANCE: " << account.getBalance() << endl;
                } else {
                    cout << "INSUFFICIENT BALANCE!" << endl;
                }
                return;
            }
        }
        cout << "INVALID ACCOUNT ID!" << endl;
    }
};

int main() {
    BankManagementSystem bank;

    int choice;
    do {
        cout << "<<<<<<<< BANK MANAGEMENT SYSTEM >>>>>>>>" << endl;
        cout << "1. Add Customer" << endl;
        cout << "2. Create Account" << endl;
        cout << "3. Deposit" << endl;
        cout << "4. Withdraw" << endl;
        cout << "5. Display Accounts" << endl;
        cout << "0. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                int customerId;
                string customerName;
                cout << "Enter customer ID: ";
                cin >> customerId;
                cout << "Enter customer name: ";
                cin >> customerName;
                bank.addCustomer(customerId, customerName);
                break;
            }
            case 2: {
                int accountId, customerId;
                double initialBalance;
                cout << "Enter account ID: ";
                cin >> accountId;
                cout << "Enter customer ID for the account: ";
                cin >> customerId;
                cout << "Enter initial balance: ";
                cin >> initialBalance;
                bank.createAccount(accountId, customerId, initialBalance);
                break;
            }
            case 3: {
                int accountId;
                double amount;
                cout << "Enter account ID for deposit: ";
                cin >> accountId;
                cout << "Enter deposit amount: ";
                cin >> amount;
                bank.deposit(accountId, amount);
                break;
            }
            case 4: {
                int accountId;
                double amount;
                cout << "Enter account ID for withdrawal: ";
                cin >> accountId;
                cout << "Enter withdrawal amount: ";
                cin >> amount;
                bank.withdraw(accountId, amount);
                break;
            }
            case 5:
                bank.displayAccounts();
                break;
            case 0:
                cout << "************************************************ EXIT PROGRAM ***************************************************" << endl;
                break;
            default:
                cout << "INVALID CHOICE. PLEASE TRY AGAIN." << endl;
                break;
        }

        cout << endl;
    } while (choice != 0);

    return 0;
}


